A brief description of the "protocol" used by Multorio:

Data packet

A data packet always has the same structure. We do include a version and a game id. The latter isn't needed ATM, because it's
implicitly encoded in the names (see below), but that might change.

- Byte 1+2: Game-ID (low/high)
- Byte 3: Protocol version
- Byte 4: Type of data
- Byte 5: Length
- Byte 6: Counter / Round
- Byte 7-X: The actual data. What's in here depends on the type. The application has to take care of this.

In this case:

Game-ID: Fixed to 1
Version: Fixed to 1 for now
Types:  1 = random seed (two bytes)
        2 = Power/Angle (one byte each)
        3 = Turn end / Restart (no payload)
        4 = Exit game (no payload)
        5 = Message (one byte); will be send via a kind of side-channel, see below
        6 = Sync (no payload)

Init phase 1 / Matchmaking

Each player names himself and the opponent. A match is made if one player's name matches the other's opponent name and vice versa.
To determine this, the each client creates two transmit-names, which are composed of the two names in alternating order
plus a prefix to indicate the game iself.
That way, it's less likely that a conflict on the server happens due to the same name being used.

Example:

Client 1:
    Player: Horst
    Opponent: Guenther

Client 2:
    Player: Guenther
    Opponent: Horst

The prefix in this case is "mul!" for Multorio

The transmit names then are:

Client 1:
    Player: mul!Horst4Guenther
    Opponent: mul!Guenther4Horst

Client 2:
    Player: mul!Guenther4Horst
    Opponent: mul!Horst4Guenther

That way, each client should be able to send messages to the other one but the risk of a conflict with another game hosted
on the same server and/or the same name being used multiple times is being minimized as much as the current server
solution allows for it.

For messages, this name is extended by adding a "!msg" to it. That way, messages won't conflict with the actual game data
and exist on their own side-channel kind of thing. For these, the flow-control is much more relaxed. If sending or receiving such
a message fails, we actually don't care.


Init phase 2 / Seed exchange

To avoid to implement a kind of client/server relation between the clients and to keep each client as simple as possible,
we do a kind of "key exchange" between the two. Each client calculates a random number in the range of 0-999 and sends it to
the other client. If both numbers are equals, the clients will generate a new number each and repeat.
Then, each client will create a seed based on its own number and the one retrieved from the other client by
using this algorithm:

Step 0: Generate a random number, send it to the other client, receive its number

Step 1: Determine the smaller number. If both are equal, go back to Step 0.
Step 2: The player with the smaller number begins the round.
Step 3: Multiply the smaller number by 1000 and add it to the larger number.
Step 4: Calculate the result MOD 65536 (r=z-int(z/n)*n) <= That formula is simplified, but it works for whole numbers.
Step 5: Initialize the random number generator with this new seed value.

Example:

Client 1 calculates number 456, Client 2 calculates 678. They both exchange these numbers.
The smaller number is 456 => 456*1000 = 456000.
Add the larger number to that: 456000+678 = 456678
456678 MOD 65535 = 63462

=> New seed = 63462

The client with the smaller number will also be the first mover. The left player always moves first. Depending on who
moves first, one client might have to switch player names around.


Dealing with connection/data loading problems

There are several problems with loading a player's move from the server. In general, the WIC64 can report two kinds of issues:

1. Timeout: This refers to the connection between the C64 and the WIC64. I've never seen this happen except when there
is no WIC64 attached. If this happens, a resend is in order.
2. Load error: This means, that the WIC64 actually tried to load the data, but for one reason or another, it wasn't succesful.

We can ignore 1 for now, as it's rather simple to deal with. We will concentrate on 2. There are 4 possible cases:


1. The sending fails. That means, that the request to send the data returns with a load error. In that case, we simply
send the data again. It this fails for around 10 times in a row, we quit.

2. The loading fails and the request never reaches the server. This is simple as well, we just try to load the data again.
It this fails around 100 times, we quit.

3. The loading fails, but the request actually reached the server. I can't explain this one, but it happens. If it happens,
the data on the server has been flagged as used, but it never really reached the client. So we have to request it again, but
in a forced way to ignore the fact, that the server thinks that we already have it. We can't distinguish 3 from 2, so we
do this forced request either way.

4. The sending fails silently. This is the worst problem, because we don't get an error on either client. But some reason,
the data never makes it to the server, but the client thinks that is has. This will cause a deadlock situation, where the
client that has last send the data waits for the other client to receive and process it and send it's response afterwards.
However, the other client never got the data, so it's still waiting for it. So both are waiting on each other.
We can't detect this case, but we can resend the last move after some time, just to be sure. If this reaches the other client,
the deadlock will be resolved. We to this after an initial wait time of around 8 seconds and then every 3 seconds.


However, 4 (and potentially 3) has a problem: The resending client doesn't know if the receiving client got the data or not.
It doesn't know, if it had processed this move already and the player is just taking it's time or if it's a "missed move".
To allow the receiving client to distinguish the two once he gets the data, we include a kind of round-ID in each packet and
only accept the packet if this ID isn't equal to the last one we received. This "last round-ID" is only remembered while in
normal game play. Data exchange before and after (for sending the seed or synchronizing the clients) doesn't process but still
evaluates this. So we have to make sure that in these cases, some round-ID is being send that's always different from the last one...
...like -1 for example.

With all this in place, the game usually runs stable. There's one remaining issue: When a round ends, it might happen that one
client is delayed because of 3 or 4 (most likely 4). In that case, it can happen the non-delayed client has already send the
sync message to start a new round while the other one is still waiting for the data. We can't really deal with this. The round-ending
screen adds an artifical delay of around 5 seconds to give some room to deal with this issue, but it's not guaranteed that
this will be enough. There's nothing we can do to avoid this, I'm afraid.



